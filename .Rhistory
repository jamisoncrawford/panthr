"Business Admin.",
"Policy Studies",
"Health & Human",
"Gen. Studies",
"Gov. Admin.",
"Urban Life",
"Uni. Wide",
"Nursing",
"Health Prof.",
"Inst. Pub. Health",
"Ed./Human Dev.",
"Honors",
"Sch. P. Health",
"Perimeter",
"Biomedical Sci.",
"College of Arts")
file <- "~/CASA HHMI/New OIE Queries/2019-12-12_casa_hhmi_gsu_wide_including_unfinished_sql_export.csv"
students <- read_csv(file) %>%
filter(!is.na(GRAD_TERM)) %>%
select(SEX, RACE_CODES, ETHNIC_CODES, GRAD_TERM, GRAD_GPA,
GRAD_COLLEGE, GRAD_DEPARTMENT, GRAD_MAJOR, GRAD_DEGREE)
students <- students[1:10000, ]
save(major, file = "data/major.RData")
save(degree, file = "data/degree.RData")
save(college, file = "data/college.RData")
save(department, file = "data/department.RData")
save(students, file = "students.RData")
rm(major, degree, college, department, file)
load(file = "data/panthr_data.RData")
# TERM FAMILY: term_dash()
term_dash <- function(term){
x <- term
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
if (na){y[i] <- NA}
else if (!na){y[i] <- paste(substr(x[i], 1, 4),
substr(x[i], 5, 6),
sep = "-")}
}
return(y)
}
# TERM FAMILY: term_date()
term_date <- function(term){
x <- term
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
if (na){y[i] <- NA}
else if (!na){y[i] <- paste(substr(x[i], 1, 4),
substr(x[i], 5, 6),
"01",
sep = "-")}
}
return(y)
}
# TERM FAMILY: term_season()
term_season <- function(term){
x <- term
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
mo <- substr(x[i], 5, 6)
if (na){y[i] <- NA}
else if (!na & mo == "01"){y[i] <- "Spring"}
else if (!na & mo == "05"){y[i] <- "Summer"}
else if (!na & mo == "08"){y[i] <- "Fall"}
}
return(y)
}
# TERM FAMILY: term_name()
term_name <- function(term, sep = " "){
x <- term
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
yr <- substr(x[i], 1, 4)
mo <- substr(x[i], 5, 6)
if (na){y[i] <- NA}
else if (!na & !grepl("01|05|08", mo)){
y[i] <- NA;
warning("Value(s) passed to 'term =' do not end in '01', '05', or '08'; coercing to NA", call. = FALSE)}
else if (!na & mo == "01"){y[i] <- paste("Spring", yr, sep = sep)}
else if (!na & mo == "05"){y[i] <- paste("Summer", yr, sep = sep)}
else if (!na & mo == "08"){y[i] <- paste("Fall", yr, sep = sep)}
}
return(y)
}
# TERM FAMILY: term_year_calendar()
term_year_calendar <- function(term){
x <- term
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
if (na){y[i] <- NA}
else if (!na){y[i] <- substr(x[i], 1, 4)}
}
return(y)
}
# TERM FAMILY: term_year_academic()
term_year_academic <- function(term){
x <- term
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
mo <- substr(x[i], 5, 6)
yr <- as.integer(substr(x[i], 1, 4))
if (na){y[i] <- NA}
else if (!na & !grepl("01|05|08", mo)){
y[i] <- NA;
warning("Value(s) passed to 'term =' do not end in '01', '05', or '08'; coercing to NA", call. = FALSE)}
else if (!na & mo == "01"){y[i] <- yr - 1}
else if (!na & mo == "05"){y[i] <- yr - 1}
else if (!na & mo == "08"){y[i] <- yr}
}
return(y)
}
# TERM FAMILY: term_year_fiscal()
term_year_fiscal <- function(term){
x <- term
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
mo <- substr(x[i], 5, 6)
yr <- as.integer(substr(x[i], 1, 4))
if (na){y[i] <- NA}
else if (!na & !grepl("01|05|08", mo)){
y[i] <- NA;
warning("Value(s) passed to 'term =' do not end in '01', '05', or '08'; coercing to NA", call. = FALSE)}
else if (!na & mo == "01"){y[i] <- yr}
else if (!na & mo == "05"){y[i] <- yr + 1}
else if (!na & mo == "08"){y[i] <- yr + 1}
}
return(y)
}
# DEMOGRAPHICS FAMILY: decode_sex()
decode_sex <- function(code){
x <- code
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
s <- x[i]
if (na){y[i] <- "Not Reported"}
else if (!na & !grepl("M|F", s)){
y[i] <- NA;
warning("Value(s) passed to 'code =' do not contain 'M' or 'F'; coercing to NA", call. = FALSE)}
else if (!na & s == "M"){y[i] <- "Male"}
else if (!na & s == "F"){y[i] <- "Female"}
}
return(y)
}
# DEMOGRAPHICS FAMILY: decode_race_parsed()
decode_race_parsed <- function(code){
x <- code
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
r <- x[i]
if (na){y[i] <- "Not Reported"}
else if (!na & grepl("[AC-HJ-OQ-VX-Y]{,1}", r)){
y[i] <- NA
warning("Unrecognized race code(s) passed to 'code ='; coercing to NA", call. = FALSE)}
else if (!na){
r <- strsplit(x = r, split = "")[[1]];
r <- gsub("W", "White", r);
r <- gsub("B", "Black or African American", r);
r <- gsub("Z", "Asian", r);
r <- gsub("I", "Native American or Native Alaskan", r);
r <- gsub("P", "Native Hawaiian or Pacific Islander", r);
y[i] <- paste0(r, collapse = ", ")}
}
return(y)
}
# DEMOGRAPHICS FAMILY: decode_race()
decode_race <- function(code){
x <- code
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
rc <- x[i]
if (na){y[i] <- "Not Reported"}
else if (!na & grepl("[AC-HJ-OQ-VX-Y03-9]{,1}", rc)){
y[i] <- NA
warning("Unrecognized race code(s) passed to 'code ='; coercing to NA", call. = FALSE)}
else if (!na & grepl("[1-2]{,1}", rc)){
stop("'1' or '2' was passed to 'code ='; did you accidentally input ethnicity codes?", call. = FALSE)}
else if (!na & nchar(rc) > 1){
y[i] <- "Two or More Races"
}
else if (!na & nchar(rc) == 1){
rc <- gsub("W", "White", rc)
rc <- gsub("B", "Black or African American", rc)
rc <- gsub("Z", "Asian", rc)
rc <- gsub("I", "Native American or Native Alaskan", rc)
rc <- gsub("P", "Native Hawaiian or Pacific Islander", rc)
y[i] <- rc}
}
return(y)
}
# DEMOGRAPHICS FAMILY: decode_ethnicity()
decode_ethnicity <- function(code){
x <- code
y <- vector()
for (i in seq_along(x)){
na <- is.na(x[i])
et <- x[i]
if (na){y[i] <- "Not Reported"}
else if (!na & grepl("[3-9]{,1}", et)){
y[i] <- NA
warning("Unrecognized ethnicity code(s) passed to 'code ='; coercing to NA", call. = FALSE)}
else if (!na & grepl("[a-zA-Z]{,1}", et)){
stop("One or more alphabetical characters were passed to 'code ='; did you accidentally use race codes?", call. = FALSE)}
else if (!na & et == "1"){y[i] <- "Not Hispanic/Latinx"}
else if (!na & et == "2"){y[i] <- "Hispanic/Latinx"}
}
return(y)
}
# DEMOGRAPHICS FAMILY: decode_ethnorace()
decode_ethnorace <- function(race, ethnicity){
r <- race
e <- ethnicity
v <- vector()
for (i in seq_along(r)){
if (is.na(r[i])){r[i] <- ""}
if (is.na(e[i])){e[i] <- ""}
if (e[i] == 1){e[i] <- ""}
v[i] <- paste0(r[i], e[i], collapse = "")
if (v[i] == ""){v[i] <- "Not Reported"}
else if (nchar(v[i]) > 1){v[i] <- "Two or More Races"}
else if (v[i] == "W"){v[i] <- "White"}
else if (v[i] == "Z"){v[i] <- "Asian"}
else if (v[i] == "2"){v[i] <- "Hispanic or Latinx"}
else if (v[i] == "B"){v[i] <- "Black or African American"}
else if (v[i] == "I"){v[i] <- "Native American or Native Alaskan"}
else if (v[i] == "P"){v[i] <- "Native Hawaiian or Pacific Islander"}
}
return(v)
}
# VALIDATION FAMILY: decode_department()
decode_department <- function(code){
c <- code
v <- vector()
d <- department
'%!in%' <- function(x,y)!('%in%'(x,y))
for (i in seq_along(code)){
if (is.na(c[i])){v[i] <- NA}
if (!is.na(c[i]) & c[i] %!in% d$department_code){
v[i] <- NA
warning("One or more values passed to 'code =' was not recognized; coercing to NA", call. = F)
}
else if (!is.na(c[i]) & c[i] %in% d$department_code) {v[i] <- d[c[i] == d$department_code, "department_full"]}
}
return(unlist(v))
}
# VALIDATION FAMILY: decode_college()
decode_college <- function(code, short = FALSE){
c <- code
v <- vector()
d <- college
'%!in%' <- function(x,y)!('%in%'(x,y))
for (i in seq_along(code)){
if (is.na(c[i])){v[i] <- NA}
if (!is.na(c[i]) & c[i] %!in% d$college_code){
v[i] <- NA
warning("One or more values passed to 'code =' was not recognized; coercing to NA", call. = F)
}
if (!is.na(c[i]) & c[i] %in% d$college_code & short == FALSE) {v[i] <- d[c[i] == d$college_code, "college_full"]}
else if (!is.na(c[i]) & c[i] %in% d$college_code & short == TRUE) {v[i] <- d[c[i] == d$college_code, "college_short"]}
}
return(unlist(v))
}
# VALIDATION FAMILY: decode_degree()
decode_degree <- function(code){
c <- code
v <- vector()
d <- degree
'%!in%' <- function(x,y)!('%in%'(x,y))
for (i in seq_along(code)){
if (is.na(c[i])){v[i] <- NA}
if (!is.na(c[i]) & c[i] %!in% d$degree_code){
v[i] <- NA
warning("One or more values passed to 'code =' was not recognized; coercing to NA", call. = F)
}
else if (!is.na(c[i]) & c[i] %in% d$degree_code) {v[i] <- d[c[i] == d$degree_code, "degree_full"]}
}
return(unlist(v))
}
# VALIDATION FAMILY: decode_major()
decode_major <- function(code){
c <- code
v <- vector()
d <- major
'%!in%' <- function(x,y)!('%in%'(x,y))
for (i in seq_along(code)){
if (is.na(c[i])){v[i] <- NA}
if (!is.na(c[i]) & c[i] %!in% d$major_code){
v[i] <- NA
warning("One or more values passed to 'code =' was not recognized; coercing to NA", call. = F)
}
else if (!is.na(c[i]) & c[i] %in% d$major_code) {v[i] <- d[c[i] == d$major_code, "major_full"]}
}
return(unlist(v))
}
# GPA FAMILY: gpa_round()
gpa_round <- function(gpa, digits = 1, direction = "none"){
g <- gpa
v <- vector()
for (i in seq_along(gpa)){
if (is.na(gpa[i])){v[i] <- NA}
else if (!is.na(g[i]) & direction == "none"){v[i] <- round(g, digits = digits)}
else if (!is.na(g[i]) & direction == "up"){v[i] <- ceiling(g[i] * 10^digits) / 10^digits}
else if (!is.na(g[i]) & direction == "down"){v[i] <- floor(g[i] * 10^digits) / 10^digits}
}
return(v)
}
# GPA FAMILY: gpa_discretize()
gpa_discretize <- function(gpa, range = "thirds", right = FALSE){
g <- gpa
v <- vector()
tnth <- seq(0, 4.4, by = 0.1)
tnlb <- c("0.0-0.1", "0.1-0.2", "0.2-0.3", "0.3-0.4", "0.4-0.5", "0.5-0.6", "0.6-0.7", "0.7-0.8", "0.8-0.9", "0.9-1.0", "1.0-1.1",
"1.1-1.2", "1.2-1.3", "1.3-1.4", "1.4-1.5", "1.5-1.6", "1.6-1.7", "1.7-1.8", "1.8-1.9", "1.9-2.0", "2.0-2.1", "2.1-2.2",
"2.2-2.3", "2.3-2.4", "2.4-2.5", "2.5-2.6", "2.6-2.7", "2.7-2.8", "2.8-2.9", "2.9-3.0", "3.0-3.1", "3.1-3.2", "3.2-3.3",
"3.3-3.4", "3.4-3.5", "3.5-3.6", "3.6-3.7", "3.7-3.8", "3.8-3.9", "3.9-4.0", "4.0-4.1", "4.1-4.2", "4.2-4.3", "4.3-4.4")
qrts <- seq(0, 4.5, by = 0.25)
qrlb <- c("0.00-0.25", "0.25-0.50", "0.50-0.75", "0.75-1.00", "1.00-1.25", "1.25-1.50",
"1.50-1.75", "1.75-2.00", "2.00-2.25", "2.25-2.50", "2.50-2.75", "2.75-3.00",
"3.00-3.25", "3.25-3.50", "3.50-3.75", "3.75-4.00", "4.00-4.25", "4.25-4.50")
thrd <- c(0, 0.33, 0.66, 1, 1.33, 1.66, 2, 2.33, 2.66, 3, 3.33, 3.66, 4, 4.33)
thlb <- c("0.0-0.3", "0.3-0.6", "0.6-1.0", "1.0-1.3", "1.3-1.6", "1.6-2.0", "2.0-2.3",
"2.3-2.6", "2.6-3.0", "3.0-3.3", "3.3-3.6", "3.6-4.0", "4.0-4.3")
halv <- seq(0, 4.5, by = 0.5)
halb <- c("0.0-0.5", "0.5-1.0", "1.0-1.5", "1.5-2.0", "2.0-2.5", "2.5-3.0", "3.0-3.5", "3.5-4.0", "4.0-4.5")
for (i in seq_along(gpa)){
if (is.na(g[i])){v[i] <- NA}
else if (g[i] > 4.33){
v[i] <- NA
warning("One or more values passed to 'gpa =' exceeds 3.33; coercing to NA",call. = FALSE)
}
else if (!is.na(g[i]) & range == "tenths"){v[i] <- as.character(cut(x = g[i], breaks = tnth, labels = tnlb, right = right))}
else if (!is.na(g[i]) & range == "quarters"){v[i] <- as.character(cut(x = g[i], breaks = qrts, labels = qrlb, right = right))}
else if (!is.na(g[i]) & range == "thirds"){v[i] <- as.character(cut(x = g[i], breaks = thrd, labels = thlb, right = right))}
else if (!is.na(g[i]) & range == "halves"){v[i] <- as.character(cut(x = g[i], breaks = halv, labels = halb, right = right))}
}
v <- gsub(x = v, pattern = ",", replacement = "-")
v <- gsub(x = v, pattern = "\\[|\\)", replacement = "")
return(v)
}
# SET WORKING DIRECTORY & READ IN DATASETS
setwd("~/GSUR Community of Practice/panthr")
if(!require(readr)){install.packages("readr")}
if(!require(dplyr)){install.packages("dplyr")}
library(readr)
library(dplyr)
# READ & PREPARE PANTHR DATASETS
major <- read_csv("old/major_validation.csv")
degree <- read_csv("old/degree_validation.csv")
college <- read_csv("old/college_validation.csv")
department <- read_csv("old/department_validation.csv")
names(major) <- c("major_code", "major_full")
names(degree) <- c("degree_code", "degree_full")
names(college) <- c("college_code", "college_full")
names(department) <- c("department_code", "department_full")
college$college_short <- c("Health Sciences",
"Business",
"Law",
"Superuser",
"U. College",
"Standing",
"Arts & Sciences",
"Education",
"Dev. Studies",
"Urban Affairs",
"Business Admin.",
"Policy Studies",
"Health & Human",
"Gen. Studies",
"Gov. Admin.",
"Urban Life",
"Uni. Wide",
"Nursing",
"Health Prof.",
"Inst. Pub. Health",
"Ed./Human Dev.",
"Honors",
"Sch. P. Health",
"Perimeter",
"Biomedical Sci.",
"College of Arts")
file <- "~/CASA HHMI/New OIE Queries/2019-12-12_casa_hhmi_gsu_wide_including_unfinished_sql_export.csv"
students <- read_csv(file) %>%
filter(!is.na(GRAD_TERM)) %>%
select(SEX, RACE_CODES, ETHNIC_CODES, GRAD_TERM, GRAD_GPA,
GRAD_COLLEGE, GRAD_DEPARTMENT, GRAD_MAJOR, GRAD_DEGREE)
students <- students[1:10000, ]
save(major, file = "data/major.RData")
save(degree, file = "data/degree.RData")
save(college, file = "data/college.RData")
save(department, file = "data/department.RData")
save(students, file = "students.RData")
# PACKAGE PANTHR
#' Date: 2019-12-16
#' R Version: 3.6.1
#' RStudio Version: 1.2.1578
#' Operating System: Windows 10
#' Description: Custom functions designed to streamline common data preprocessing tasks with GSU warehouse data.
# SET WORKING DIRECTORY & READ IN DATASETS
setwd("~/GSUR Community of Practice/panthr")
if(!require(readr)){install.packages("readr")}
if(!require(dplyr)){install.packages("dplyr")}
library(readr)
library(dplyr)
# READ & PREPARE PANTHR DATASETS
major <- read_csv("old/major_validation.csv")
degree <- read_csv("old/degree_validation.csv")
college <- read_csv("old/college_validation.csv")
department <- read_csv("old/department_validation.csv")
names(major) <- c("major_code", "major_full")
names(degree) <- c("degree_code", "degree_full")
names(college) <- c("college_code", "college_full")
names(department) <- c("department_code", "department_full")
college$college_short <- c("Health Sciences",
"Business",
"Law",
"Superuser",
"U. College",
"Standing",
"Arts & Sciences",
"Education",
"Dev. Studies",
"Urban Affairs",
"Business Admin.",
"Policy Studies",
"Health & Human",
"Gen. Studies",
"Gov. Admin.",
"Urban Life",
"Uni. Wide",
"Nursing",
"Health Prof.",
"Inst. Pub. Health",
"Ed./Human Dev.",
"Honors",
"Sch. P. Health",
"Perimeter",
"Biomedical Sci.",
"College of Arts")
file <- "~/CASA HHMI/New OIE Queries/2019-12-12_casa_hhmi_gsu_wide_including_unfinished_sql_export.csv"
students <- read_csv(file) %>%
filter(!is.na(GRAD_TERM)) %>%
select(SEX, RACE_CODES, ETHNIC_CODES, GRAD_TERM, GRAD_GPA,
GRAD_COLLEGE, GRAD_DEPARTMENT, GRAD_MAJOR, GRAD_DEGREE)
students <- students[1:10000, ]
save(major, file = "data/major.RData")
save(degree, file = "data/degree.RData")
save(college, file = "data/college.RData")
save(department, file = "data/department.RData")
save(students, file = "data/students.RData")
load(file = "data/college.RData")
setwd("~/R/panthr/data")
setwd("~/R/panthr")
load(file = "data/college.RData")
View(college)
load(file = "data/department.RData")
load(file = "data/major.RData")
degree <- load(file = "data/degree.RData")
rm("degree")
load(file = "data/degree.RData")
load(file = "data/students.RData")
class(students)
min(students$GRAD_TERM)
max(students$GRAD_TERM)
library(panthr)
library(panthr)
library(panthr)
library(panthr)
package?panthr
library(panthr)
gpa_discretize(students$GRAD_GPA)
table(gpa_discretize(students$GRAD_GPA))
?gpa_discretize
?library(panthr)
?panthr
??panthr
?decode_department
?college
decode_college("BU")
decode_college(code = "BU", short = TRUE)
decode_college(code = "BU", short = FALSE)
library(pan)
library(panthr)
?gpa_discretize
decode_college("BU", short = TRUE)
library(panthr)
students
gpa_discretize(gpa = students$GRAD_GPA, range = "thirds")
gpa_discretize(gpa = students$GRAD_GPA, range = "tenths")
table(gpa_discretize(gpa = students$GRAD_GPA, range = "thirds"))
decode_college(code = students$GRAD_COLLEGE)
decode_college(code = students$GRAD_COLLEGE, short = TRUE)
decode_ethnicity("1")
decode_ethnicity("2")
decode_race("B")
decode_race("BW")
decode_race_parsed(code = "BW")
decode_ethnorace(race = "BW", ethnicity = "1")
decode_ethnorace(race = "B", ethnicity = "1")
decode_ethnorace(race = "B", ethnicity = "2")
decode_ethnorace(race = students$RACE_CODES, ethnicity = students$ETHNIC_CODES)
table(decode_ethnorace(race = students$RACE_CODES, ethnicity = students$ETHNIC_CODES))
?gpa_discretize
View(students)
